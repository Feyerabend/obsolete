<!--
==========================
Build
==========================

Set the "JAVA_HOME" environment property is set to match the top level
directory containing the JVM you want to use. For example:

C:\> set JAVA_HOME=C:\jdk1.3

or on Unix:

% setenv JAVA_HOME /usr/local/java
  (csh)
> JAVA_HOME=/usr/java; export JAVA_HOME
  (ksh, bash)

(or change the build.bat/build.sh file directly).


Building instructions
=====================

Make sure your current working directory is where this very file is
located. Then type

  ./build.sh all (unix)
  .\build.bat all (win32)

if everything is right (see *) and all the required packages are visible, this action
will generate a jar file:

  tests.jar    - This jar contains unit tests for classes.

in the "./build" directory. These jar files can all be run by double clicking with
the mouse on the jar file or by running the command

  java -jar <jar file name>

from within the ./build directory. Some of the jars depend on others and on files
in ./lib so the distributions file structure should not be changed without repackaging
the jars to remove these dependencies.

* On Win/98 you may get an "Out of Environment Space" error message. This happens if
Windows provides too small a space for environment variables. To work around this
limitation: 
  Close the DOS window (the error can corrupt its CLASSPATH variable). 
  Open a new DOS window. Click on the MS-DOS icon at the top left of the window. 
  Select the Properties option. 
  Click on the Memory tab. 
  Adjust the "Initial Environment" drop-down box from "Auto" to "2816". 
  Click OK. 
Then try building.

Build targets
=============

These are the meaningful targets for this build file:

 - all        -> creates all the jars 
 - tests      -> creates the ./build/tests.jar file 
 - runtests   -> Runs the test cases in ./build/tests.jar
 - compiledist-> creates the compiled distribution in ./dist
 - sourcedist -> creates the source distribution in ./dist
 - api        -> generates the Jazz API documentation in ./doc/api"/
 - clean      -> restores the distribution to its original and clean state 
 - usage      -> (default) displays build menu 

-->

<project name="DMZ" default="usage" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="DMZ"/>
    <property name="name" value="dmz"/>
    <property name="version" value="0.1"/>
    <property name="year" value="2001"/>

    <echo message="----------- ${Name} ${version} [${year}] ------------"/>

    <property name="build.compiler" value="modern"/>
    <property name="debug" value="off"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="on"/>
    <property name="packages" value="demo.*"/>

    <!-- Define the source directories -->
    <property name="root.dir" value="./"/>
    <property name="src.dir" value="${root.dir}/src"/>
    <property name="doc.dir" value="${root.dir}/doc"/>
    <property name="tests.dir" value="${root.dir}/tests"/>
    <property name="lib.dir" value="${root.dir}/lib"/>

    <!-- Define the source build directories -->
    <property name="doc.apidocs" value="${doc.dir}/api"/>     
    <property name="build.dir" value="${root.dir}/build"/>
    <property name="build.lib" value="${root.dir}/build/lib"/>
    <property name="build.dmz.src" value="${root.dir}/build/dmz/src"/>
    <property name="build.dmz.dest" value="${root.dir}/build/dmz/classes"/>
    <property name="build.tests.src" value="${root.dir}/build/tests/src"/>
    <property name="build.tests.dest" value="${root.dir}/build/tests/classes"/>

    <!-- Define the distribution directories -->
    <property name="dist.root" value="${root.dir}/dist"/>
    <property name="sourcedist.dir" value="${dist.root}/${name}-${version}/${name}-${version}"/>
    <property name="compiledist.dir" value="${dist.root}/${name}-${version}-compiled/${name}-${version}"/>

    <filter token="copyright" value="Copyright (C) ${year} by DMZ."/> 
    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   all        --> builds all the jars in ./build"/>
    <echo message="   tests      --> builds the tests.jar file in ./build"/>
    <echo message="   runtests   --> Runs the test cases in ./build/tests.jar"/>
    <echo message="   compiledist--> creates the compiled distribution in ./dist"/>
    <echo message="   sourcedist --> creates the source distribution in ./dist"/>
    <echo message="   api        --> generates the API documentation in ./doc/api"/>
    <echo message="   clean      --> restores distribution to original state"/>
    <echo message="   usage      --> (default) displays build menu"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.lib}"/>

    <copy todir="${build.lib}">
      <fileset dir="${lib.dir}"/>
    </copy>

  </target>

  <!-- =================================================================== -->
  <!-- Prepares the dmz code                                              -->
  <!-- =================================================================== -->
  <target name="prepare-dmz" depends="prepare">
    <mkdir dir="${build.dmz.src}"/>
    <mkdir dir="${build.dmz.dest}"/>

    <copy todir="${build.dmz.src}">
      <fileset dir="${src.dir}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the test code                                              -->
  <!-- =================================================================== -->
  <target name="prepare-tests" depends="prepare">
    <mkdir dir="${build.tests.src}"/>
    <mkdir dir="${build.tests.dest}"/>

   <copy todir="${build.tests.src}">
      <fileset dir="${tests.dir}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the dmz directory                                         -->
  <!-- =================================================================== -->
  <target name="compile-dmz" depends="prepare-dmz">
    <!-- copy resource files -->
    <copy todir="${build.dmz.dest}">
      <fileset dir="${build.dmz.src}" excludes="**/*.java"/>
    </copy>

    <javac srcdir="${build.dmz.src}"
           destdir="${build.dmz.dest}"
           debug="${debug}"
           deprecation="${deprecation}" 
           optimize="${optimize}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the tests directory                                        -->
  <!-- =================================================================== -->
  <target name="compile-tests" depends="prepare-tests, dmz">
    <!-- copy resource files -->
    <copy todir="${build.tests.dest}">
      <fileset dir="${build.tests.src}" excludes="**/*.java"/>
    </copy>

    <javac srcdir="${build.tests.src}"
           destdir="${build.tests.dest}"
     classpath="${build.dir}/${name}.jar"
           debug="${debug}"
           deprecation="${deprecation}" 
           optimize="${optimize}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the dmz.jar in ./build                                     -->
  <!-- =================================================================== -->
  <target name="dmz" depends="compile-dmz">
    <jar jarfile="${build.dir}/${name}.jar"
         basedir="${build.dmz.dest}"
         includes="**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the tests.jar in ./build                                    -->
  <!-- =================================================================== -->
  <target name="tests" depends="compile-tests">
    <jar jarfile="${build.dir}/tests.jar"
         basedir="${build.tests.dest}"
         manifest="${build.tests.src}/tests.manifest"
         includes="**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Run the test cases                                                  -->
  <!-- =================================================================== -->
  <target name="runtests" depends="tests">
    <java fork="yes" classname="junit.textui.TestRunner" taskname="junit" failonerror="true">
      <arg value="demo.dmz.test.BinarySearchTreeTest"/>
      <classpath>
        <pathelement location="${build.dir}/${name}.jar" />
        <pathelement location="${build.dir}/tests.jar" />
        <pathelement path="" />
        <pathelement path="${java.class.path}" />
      </classpath>
    </java>
  </target>


  <!-- =================================================================== -->
  <!-- Build all jars in ./build                                           -->
  <!-- =================================================================== -->
  <target name="all" depends="runtests"/>

  <!-- =================================================================== -->
  <!-- Creates the API documentation in ./doc/api/                     -->
  <!-- =================================================================== -->
  <target name="api" depends="prepare-dmz">
    <mkdir dir="${doc.apidocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.dmz.src}"
             destdir="${doc.apidocs}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} by DMZ All rights reserved."
    />
  </target>

  <!-- =================================================================== -->
  <!-- Build source distribution in ./dist                                 -->
  <!-- =================================================================== -->
  <target name="sourcedist" depends="clean">
    <mkdir dir="${dist.root}"/>
    <mkdir dir="${sourcedist.dir}"/>

    <copy todir="${sourcedist.dir}">
      <fileset dir="${root.dir}"/>
    </copy>

    <!-- Now delete what we dont want -->
    <delete dir="${sourcedist.dir}/dist"/>

    <fixcrlf srcdir="${sourcedist.dir}"
       cr="remove" eof="remove"
       includes="**/*.sh"
    />

    <zip zipfile="${dist.root}/${name}-${version}.zip"
         basedir="${dist.root}/${name}-${version}"
         whenempty="create"
    />

  </target>
  

  <!-- =================================================================== -->
  <!-- Build compiled distribution in ./dist                                 -->
  <!-- =================================================================== -->
  <target name="compiledist" depends="clean, all, api">
    <mkdir dir="${dist.root}"/>
    <mkdir dir="${compiledist.dir}"/>

    <copy todir="${compiledist.dir}">
      <fileset dir="${root.dir}"/>
    </copy>

    <!-- Now delete what we dont want, probably a better way to do this -->
    <delete dir="${compiledist.dir}/dist"/>
    <delete dir="${compiledist.dir}/build/dmz"/>
    <delete dir="${compiledist.dir}/build/tests"/>

    <fixcrlf srcdir="${compiledist.dir}"
       cr="remove" eof="remove"
       includes="**/*.sh"
    />

    <zip zipfile="${dist.root}/${name}-${version}-compiled.zip"
         basedir="${dist.root}/${name}-${version}-compiled"
         whenempty="create"
    />

  </target>

  <!-- =================================================================== -->
  <!-- Clean restors distribution to original state                        -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.root}"/>
    <delete dir="${doc.apidocs}"/>
  </target>

</project>

<!-- End of file -->
